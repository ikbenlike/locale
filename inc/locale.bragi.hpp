// This file has been autogenerated, changes *will* be lost eventually...
#pragma once
#include <stdint.h>
#include <stddef.h>
#include <vector>
#include <cassert>
#include <optional>
#include <string>
#include <bragi/internals.hpp>

struct pair {
	pair()
	: m_left{}, p_left{false}, 
	  m_right{}, p_right{false} { }

	std::string &left() {
		return m_left;
	}

	void set_left(std::string val) {
		p_left = true;
		m_left = val;
	}

	std::string &right() {
		return m_right;
	}

	void set_right(std::string val) {
		p_right = true;
		m_right = val;
	}

	size_t size_of_body() {
		size_t size = 0;
		size += bragi::detail::size_of_varint(m_left.size());
		size += m_left.size();
		size += bragi::detail::size_of_varint(m_right.size());
		size += m_right.size();

		return size;
	}

	template <typename Writer>
	bool encode_body(Writer &wr, bragi::serializer &sr) {
		(void)wr;
		(void)sr;

		if (!sr.write_varint(wr, m_left.size()))
			return false;
		for (size_t i0 = 0; i0 < m_left.size(); i0++) {
			if (!sr.write_integer<char>(wr, m_left[i0]))
				return false;
		}
		if (!sr.write_varint(wr, m_right.size()))
			return false;
		for (size_t i0 = 0; i0 < m_right.size(); i0++) {
			if (!sr.write_integer<char>(wr, m_right[i0]))
				return false;
		}
		return true;
	}

	template <typename Reader>
	bool decode_body(Reader &rd, bragi::deserializer &de) {
		(void)rd;
		(void)de;
		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_left.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				if (!de.read_integer<char>(rd, m_left[i0]))
					return false;
		}
		p_left = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_right.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				if (!de.read_integer<char>(rd, m_right[i0]))
					return false;
		}
		p_right = true;

		return true;
	}

private:
	std::string m_left; bool p_left;
	std::string m_right; bool p_right;
}; // struct pair

struct lc_ctype {
	lc_ctype()
	: m_upper{}, p_upper{false}, 
	  m_lower{}, p_lower{false}, 
	  m_alpha{}, p_alpha{false}, 
	  m_digit{}, p_digit{false}, 
	  m_alnum{}, p_alnum{false}, 
	  m_space{}, p_space{false}, 
	  m_cntrl{}, p_cntrl{false}, 
	  m_punct{}, p_punct{false}, 
	  m_graph{}, p_graph{false}, 
	  m_print{}, p_print{false}, 
	  m_xdigit{}, p_xdigit{false}, 
	  m_blank{}, p_blank{false}, 
	  m_toupper{}, p_toupper{false}, 
	  m_tolower{}, p_tolower{false} { }

	std::vector<std::string> &upper() {
		return m_upper;
	}

	std::string &upper(size_t i) {
		return m_upper[i];
	}

	size_t upper_size() {
		return m_upper.size();
	}

	void set_upper(std::vector<std::string> val) {
		p_upper = true;
		m_upper = val;
	}

	void set_upper(size_t i, std::string val) {
		p_upper = true;
		m_upper[i] = val;
	}

	void add_upper(std::string v) {
		p_upper = true;
		m_upper.push_back(v);
	}

	std::vector<std::string> &lower() {
		return m_lower;
	}

	std::string &lower(size_t i) {
		return m_lower[i];
	}

	size_t lower_size() {
		return m_lower.size();
	}

	void set_lower(std::vector<std::string> val) {
		p_lower = true;
		m_lower = val;
	}

	void set_lower(size_t i, std::string val) {
		p_lower = true;
		m_lower[i] = val;
	}

	void add_lower(std::string v) {
		p_lower = true;
		m_lower.push_back(v);
	}

	std::vector<std::string> &alpha() {
		return m_alpha;
	}

	std::string &alpha(size_t i) {
		return m_alpha[i];
	}

	size_t alpha_size() {
		return m_alpha.size();
	}

	void set_alpha(std::vector<std::string> val) {
		p_alpha = true;
		m_alpha = val;
	}

	void set_alpha(size_t i, std::string val) {
		p_alpha = true;
		m_alpha[i] = val;
	}

	void add_alpha(std::string v) {
		p_alpha = true;
		m_alpha.push_back(v);
	}

	std::vector<std::string> &digit() {
		return m_digit;
	}

	std::string &digit(size_t i) {
		return m_digit[i];
	}

	size_t digit_size() {
		return m_digit.size();
	}

	void set_digit(std::vector<std::string> val) {
		p_digit = true;
		m_digit = val;
	}

	void set_digit(size_t i, std::string val) {
		p_digit = true;
		m_digit[i] = val;
	}

	void add_digit(std::string v) {
		p_digit = true;
		m_digit.push_back(v);
	}

	std::vector<std::string> &alnum() {
		return m_alnum;
	}

	std::string &alnum(size_t i) {
		return m_alnum[i];
	}

	size_t alnum_size() {
		return m_alnum.size();
	}

	void set_alnum(std::vector<std::string> val) {
		p_alnum = true;
		m_alnum = val;
	}

	void set_alnum(size_t i, std::string val) {
		p_alnum = true;
		m_alnum[i] = val;
	}

	void add_alnum(std::string v) {
		p_alnum = true;
		m_alnum.push_back(v);
	}

	std::vector<std::string> &space() {
		return m_space;
	}

	std::string &space(size_t i) {
		return m_space[i];
	}

	size_t space_size() {
		return m_space.size();
	}

	void set_space(std::vector<std::string> val) {
		p_space = true;
		m_space = val;
	}

	void set_space(size_t i, std::string val) {
		p_space = true;
		m_space[i] = val;
	}

	void add_space(std::string v) {
		p_space = true;
		m_space.push_back(v);
	}

	std::vector<std::string> &cntrl() {
		return m_cntrl;
	}

	std::string &cntrl(size_t i) {
		return m_cntrl[i];
	}

	size_t cntrl_size() {
		return m_cntrl.size();
	}

	void set_cntrl(std::vector<std::string> val) {
		p_cntrl = true;
		m_cntrl = val;
	}

	void set_cntrl(size_t i, std::string val) {
		p_cntrl = true;
		m_cntrl[i] = val;
	}

	void add_cntrl(std::string v) {
		p_cntrl = true;
		m_cntrl.push_back(v);
	}

	std::vector<std::string> &punct() {
		return m_punct;
	}

	std::string &punct(size_t i) {
		return m_punct[i];
	}

	size_t punct_size() {
		return m_punct.size();
	}

	void set_punct(std::vector<std::string> val) {
		p_punct = true;
		m_punct = val;
	}

	void set_punct(size_t i, std::string val) {
		p_punct = true;
		m_punct[i] = val;
	}

	void add_punct(std::string v) {
		p_punct = true;
		m_punct.push_back(v);
	}

	std::vector<std::string> &graph() {
		return m_graph;
	}

	std::string &graph(size_t i) {
		return m_graph[i];
	}

	size_t graph_size() {
		return m_graph.size();
	}

	void set_graph(std::vector<std::string> val) {
		p_graph = true;
		m_graph = val;
	}

	void set_graph(size_t i, std::string val) {
		p_graph = true;
		m_graph[i] = val;
	}

	void add_graph(std::string v) {
		p_graph = true;
		m_graph.push_back(v);
	}

	std::vector<std::string> &print() {
		return m_print;
	}

	std::string &print(size_t i) {
		return m_print[i];
	}

	size_t print_size() {
		return m_print.size();
	}

	void set_print(std::vector<std::string> val) {
		p_print = true;
		m_print = val;
	}

	void set_print(size_t i, std::string val) {
		p_print = true;
		m_print[i] = val;
	}

	void add_print(std::string v) {
		p_print = true;
		m_print.push_back(v);
	}

	std::vector<std::string> &xdigit() {
		return m_xdigit;
	}

	std::string &xdigit(size_t i) {
		return m_xdigit[i];
	}

	size_t xdigit_size() {
		return m_xdigit.size();
	}

	void set_xdigit(std::vector<std::string> val) {
		p_xdigit = true;
		m_xdigit = val;
	}

	void set_xdigit(size_t i, std::string val) {
		p_xdigit = true;
		m_xdigit[i] = val;
	}

	void add_xdigit(std::string v) {
		p_xdigit = true;
		m_xdigit.push_back(v);
	}

	std::vector<std::string> &blank() {
		return m_blank;
	}

	std::string &blank(size_t i) {
		return m_blank[i];
	}

	size_t blank_size() {
		return m_blank.size();
	}

	void set_blank(std::vector<std::string> val) {
		p_blank = true;
		m_blank = val;
	}

	void set_blank(size_t i, std::string val) {
		p_blank = true;
		m_blank[i] = val;
	}

	void add_blank(std::string v) {
		p_blank = true;
		m_blank.push_back(v);
	}

	std::vector<pair> &toupper() {
		return m_toupper;
	}

	pair &toupper(size_t i) {
		return m_toupper[i];
	}

	size_t toupper_size() {
		return m_toupper.size();
	}

	void set_toupper(std::vector<pair> val) {
		p_toupper = true;
		m_toupper = val;
	}

	void set_toupper(size_t i, pair val) {
		p_toupper = true;
		m_toupper[i] = val;
	}

	void add_toupper(pair v) {
		p_toupper = true;
		m_toupper.push_back(v);
	}

	std::vector<pair> &tolower() {
		return m_tolower;
	}

	pair &tolower(size_t i) {
		return m_tolower[i];
	}

	size_t tolower_size() {
		return m_tolower.size();
	}

	void set_tolower(std::vector<pair> val) {
		p_tolower = true;
		m_tolower = val;
	}

	void set_tolower(size_t i, pair val) {
		p_tolower = true;
		m_tolower[i] = val;
	}

	void add_tolower(pair v) {
		p_tolower = true;
		m_tolower.push_back(v);
	}

	size_t size_of_body() {
		size_t size = 0;
		size += bragi::detail::size_of_varint(m_upper.size());
		for (size_t i0 = 0; i0 < m_upper.size(); i0++) {
			size += bragi::detail::size_of_varint(m_upper[i0].size());
			size += m_upper[i0].size();
		}
		size += bragi::detail::size_of_varint(m_lower.size());
		for (size_t i0 = 0; i0 < m_lower.size(); i0++) {
			size += bragi::detail::size_of_varint(m_lower[i0].size());
			size += m_lower[i0].size();
		}
		size += bragi::detail::size_of_varint(m_alpha.size());
		for (size_t i0 = 0; i0 < m_alpha.size(); i0++) {
			size += bragi::detail::size_of_varint(m_alpha[i0].size());
			size += m_alpha[i0].size();
		}
		size += bragi::detail::size_of_varint(m_digit.size());
		for (size_t i0 = 0; i0 < m_digit.size(); i0++) {
			size += bragi::detail::size_of_varint(m_digit[i0].size());
			size += m_digit[i0].size();
		}
		size += bragi::detail::size_of_varint(m_alnum.size());
		for (size_t i0 = 0; i0 < m_alnum.size(); i0++) {
			size += bragi::detail::size_of_varint(m_alnum[i0].size());
			size += m_alnum[i0].size();
		}
		size += bragi::detail::size_of_varint(m_space.size());
		for (size_t i0 = 0; i0 < m_space.size(); i0++) {
			size += bragi::detail::size_of_varint(m_space[i0].size());
			size += m_space[i0].size();
		}
		size += bragi::detail::size_of_varint(m_cntrl.size());
		for (size_t i0 = 0; i0 < m_cntrl.size(); i0++) {
			size += bragi::detail::size_of_varint(m_cntrl[i0].size());
			size += m_cntrl[i0].size();
		}
		size += bragi::detail::size_of_varint(m_punct.size());
		for (size_t i0 = 0; i0 < m_punct.size(); i0++) {
			size += bragi::detail::size_of_varint(m_punct[i0].size());
			size += m_punct[i0].size();
		}
		size += bragi::detail::size_of_varint(m_graph.size());
		for (size_t i0 = 0; i0 < m_graph.size(); i0++) {
			size += bragi::detail::size_of_varint(m_graph[i0].size());
			size += m_graph[i0].size();
		}
		size += bragi::detail::size_of_varint(m_print.size());
		for (size_t i0 = 0; i0 < m_print.size(); i0++) {
			size += bragi::detail::size_of_varint(m_print[i0].size());
			size += m_print[i0].size();
		}
		size += bragi::detail::size_of_varint(m_xdigit.size());
		for (size_t i0 = 0; i0 < m_xdigit.size(); i0++) {
			size += bragi::detail::size_of_varint(m_xdigit[i0].size());
			size += m_xdigit[i0].size();
		}
		size += bragi::detail::size_of_varint(m_blank.size());
		for (size_t i0 = 0; i0 < m_blank.size(); i0++) {
			size += bragi::detail::size_of_varint(m_blank[i0].size());
			size += m_blank[i0].size();
		}
		size += bragi::detail::size_of_varint(m_toupper.size());
		for (size_t i0 = 0; i0 < m_toupper.size(); i0++) {
			size += m_toupper[i0].size_of_body();
		}
		size += bragi::detail::size_of_varint(m_tolower.size());
		for (size_t i0 = 0; i0 < m_tolower.size(); i0++) {
			size += m_tolower[i0].size_of_body();
		}

		return size;
	}

	template <typename Writer>
	bool encode_body(Writer &wr, bragi::serializer &sr) {
		(void)wr;
		(void)sr;

		if (!sr.write_varint(wr, m_upper.size()))
			return false;
		for (size_t i0 = 0; i0 < m_upper.size(); i0++) {
			if (!sr.write_varint(wr, m_upper[i0].size()))
				return false;
			for (size_t i1 = 0; i1 < m_upper[i0].size(); i1++) {
				if (!sr.write_integer<char>(wr, m_upper[i0][i1]))
					return false;
			}
		}
		if (!sr.write_varint(wr, m_lower.size()))
			return false;
		for (size_t i0 = 0; i0 < m_lower.size(); i0++) {
			if (!sr.write_varint(wr, m_lower[i0].size()))
				return false;
			for (size_t i1 = 0; i1 < m_lower[i0].size(); i1++) {
				if (!sr.write_integer<char>(wr, m_lower[i0][i1]))
					return false;
			}
		}
		if (!sr.write_varint(wr, m_alpha.size()))
			return false;
		for (size_t i0 = 0; i0 < m_alpha.size(); i0++) {
			if (!sr.write_varint(wr, m_alpha[i0].size()))
				return false;
			for (size_t i1 = 0; i1 < m_alpha[i0].size(); i1++) {
				if (!sr.write_integer<char>(wr, m_alpha[i0][i1]))
					return false;
			}
		}
		if (!sr.write_varint(wr, m_digit.size()))
			return false;
		for (size_t i0 = 0; i0 < m_digit.size(); i0++) {
			if (!sr.write_varint(wr, m_digit[i0].size()))
				return false;
			for (size_t i1 = 0; i1 < m_digit[i0].size(); i1++) {
				if (!sr.write_integer<char>(wr, m_digit[i0][i1]))
					return false;
			}
		}
		if (!sr.write_varint(wr, m_alnum.size()))
			return false;
		for (size_t i0 = 0; i0 < m_alnum.size(); i0++) {
			if (!sr.write_varint(wr, m_alnum[i0].size()))
				return false;
			for (size_t i1 = 0; i1 < m_alnum[i0].size(); i1++) {
				if (!sr.write_integer<char>(wr, m_alnum[i0][i1]))
					return false;
			}
		}
		if (!sr.write_varint(wr, m_space.size()))
			return false;
		for (size_t i0 = 0; i0 < m_space.size(); i0++) {
			if (!sr.write_varint(wr, m_space[i0].size()))
				return false;
			for (size_t i1 = 0; i1 < m_space[i0].size(); i1++) {
				if (!sr.write_integer<char>(wr, m_space[i0][i1]))
					return false;
			}
		}
		if (!sr.write_varint(wr, m_cntrl.size()))
			return false;
		for (size_t i0 = 0; i0 < m_cntrl.size(); i0++) {
			if (!sr.write_varint(wr, m_cntrl[i0].size()))
				return false;
			for (size_t i1 = 0; i1 < m_cntrl[i0].size(); i1++) {
				if (!sr.write_integer<char>(wr, m_cntrl[i0][i1]))
					return false;
			}
		}
		if (!sr.write_varint(wr, m_punct.size()))
			return false;
		for (size_t i0 = 0; i0 < m_punct.size(); i0++) {
			if (!sr.write_varint(wr, m_punct[i0].size()))
				return false;
			for (size_t i1 = 0; i1 < m_punct[i0].size(); i1++) {
				if (!sr.write_integer<char>(wr, m_punct[i0][i1]))
					return false;
			}
		}
		if (!sr.write_varint(wr, m_graph.size()))
			return false;
		for (size_t i0 = 0; i0 < m_graph.size(); i0++) {
			if (!sr.write_varint(wr, m_graph[i0].size()))
				return false;
			for (size_t i1 = 0; i1 < m_graph[i0].size(); i1++) {
				if (!sr.write_integer<char>(wr, m_graph[i0][i1]))
					return false;
			}
		}
		if (!sr.write_varint(wr, m_print.size()))
			return false;
		for (size_t i0 = 0; i0 < m_print.size(); i0++) {
			if (!sr.write_varint(wr, m_print[i0].size()))
				return false;
			for (size_t i1 = 0; i1 < m_print[i0].size(); i1++) {
				if (!sr.write_integer<char>(wr, m_print[i0][i1]))
					return false;
			}
		}
		if (!sr.write_varint(wr, m_xdigit.size()))
			return false;
		for (size_t i0 = 0; i0 < m_xdigit.size(); i0++) {
			if (!sr.write_varint(wr, m_xdigit[i0].size()))
				return false;
			for (size_t i1 = 0; i1 < m_xdigit[i0].size(); i1++) {
				if (!sr.write_integer<char>(wr, m_xdigit[i0][i1]))
					return false;
			}
		}
		if (!sr.write_varint(wr, m_blank.size()))
			return false;
		for (size_t i0 = 0; i0 < m_blank.size(); i0++) {
			if (!sr.write_varint(wr, m_blank[i0].size()))
				return false;
			for (size_t i1 = 0; i1 < m_blank[i0].size(); i1++) {
				if (!sr.write_integer<char>(wr, m_blank[i0][i1]))
					return false;
			}
		}
		if (!sr.write_varint(wr, m_toupper.size()))
			return false;
		for (size_t i0 = 0; i0 < m_toupper.size(); i0++) {
			if (!m_toupper[i0].encode_body(wr, sr))
				return false;
		}
		if (!sr.write_varint(wr, m_tolower.size()))
			return false;
		for (size_t i0 = 0; i0 < m_tolower.size(); i0++) {
			if (!m_tolower[i0].encode_body(wr, sr))
				return false;
		}
		return true;
	}

	template <typename Reader>
	bool decode_body(Reader &rd, bragi::deserializer &de) {
		(void)rd;
		(void)de;
		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_upper.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				{
					uint64_t size;
					if (!de.read_varint(rd, size))
						return false;
					m_upper[i0].resize(size);
					for (size_t i1 = 0; i1 < size; i1++)
						if (!de.read_integer<char>(rd, m_upper[i0][i1]))
							return false;
				}
		}
		p_upper = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_lower.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				{
					uint64_t size;
					if (!de.read_varint(rd, size))
						return false;
					m_lower[i0].resize(size);
					for (size_t i1 = 0; i1 < size; i1++)
						if (!de.read_integer<char>(rd, m_lower[i0][i1]))
							return false;
				}
		}
		p_lower = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_alpha.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				{
					uint64_t size;
					if (!de.read_varint(rd, size))
						return false;
					m_alpha[i0].resize(size);
					for (size_t i1 = 0; i1 < size; i1++)
						if (!de.read_integer<char>(rd, m_alpha[i0][i1]))
							return false;
				}
		}
		p_alpha = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_digit.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				{
					uint64_t size;
					if (!de.read_varint(rd, size))
						return false;
					m_digit[i0].resize(size);
					for (size_t i1 = 0; i1 < size; i1++)
						if (!de.read_integer<char>(rd, m_digit[i0][i1]))
							return false;
				}
		}
		p_digit = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_alnum.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				{
					uint64_t size;
					if (!de.read_varint(rd, size))
						return false;
					m_alnum[i0].resize(size);
					for (size_t i1 = 0; i1 < size; i1++)
						if (!de.read_integer<char>(rd, m_alnum[i0][i1]))
							return false;
				}
		}
		p_alnum = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_space.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				{
					uint64_t size;
					if (!de.read_varint(rd, size))
						return false;
					m_space[i0].resize(size);
					for (size_t i1 = 0; i1 < size; i1++)
						if (!de.read_integer<char>(rd, m_space[i0][i1]))
							return false;
				}
		}
		p_space = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_cntrl.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				{
					uint64_t size;
					if (!de.read_varint(rd, size))
						return false;
					m_cntrl[i0].resize(size);
					for (size_t i1 = 0; i1 < size; i1++)
						if (!de.read_integer<char>(rd, m_cntrl[i0][i1]))
							return false;
				}
		}
		p_cntrl = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_punct.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				{
					uint64_t size;
					if (!de.read_varint(rd, size))
						return false;
					m_punct[i0].resize(size);
					for (size_t i1 = 0; i1 < size; i1++)
						if (!de.read_integer<char>(rd, m_punct[i0][i1]))
							return false;
				}
		}
		p_punct = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_graph.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				{
					uint64_t size;
					if (!de.read_varint(rd, size))
						return false;
					m_graph[i0].resize(size);
					for (size_t i1 = 0; i1 < size; i1++)
						if (!de.read_integer<char>(rd, m_graph[i0][i1]))
							return false;
				}
		}
		p_graph = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_print.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				{
					uint64_t size;
					if (!de.read_varint(rd, size))
						return false;
					m_print[i0].resize(size);
					for (size_t i1 = 0; i1 < size; i1++)
						if (!de.read_integer<char>(rd, m_print[i0][i1]))
							return false;
				}
		}
		p_print = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_xdigit.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				{
					uint64_t size;
					if (!de.read_varint(rd, size))
						return false;
					m_xdigit[i0].resize(size);
					for (size_t i1 = 0; i1 < size; i1++)
						if (!de.read_integer<char>(rd, m_xdigit[i0][i1]))
							return false;
				}
		}
		p_xdigit = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_blank.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				{
					uint64_t size;
					if (!de.read_varint(rd, size))
						return false;
					m_blank[i0].resize(size);
					for (size_t i1 = 0; i1 < size; i1++)
						if (!de.read_integer<char>(rd, m_blank[i0][i1]))
							return false;
				}
		}
		p_blank = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_toupper.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				if (!m_toupper[i0].decode_body(rd, de))
					return false;
		}
		p_toupper = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_tolower.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				if (!m_tolower[i0].decode_body(rd, de))
					return false;
		}
		p_tolower = true;

		return true;
	}

private:
	std::vector<std::string> m_upper; bool p_upper;
	std::vector<std::string> m_lower; bool p_lower;
	std::vector<std::string> m_alpha; bool p_alpha;
	std::vector<std::string> m_digit; bool p_digit;
	std::vector<std::string> m_alnum; bool p_alnum;
	std::vector<std::string> m_space; bool p_space;
	std::vector<std::string> m_cntrl; bool p_cntrl;
	std::vector<std::string> m_punct; bool p_punct;
	std::vector<std::string> m_graph; bool p_graph;
	std::vector<std::string> m_print; bool p_print;
	std::vector<std::string> m_xdigit; bool p_xdigit;
	std::vector<std::string> m_blank; bool p_blank;
	std::vector<pair> m_toupper; bool p_toupper;
	std::vector<pair> m_tolower; bool p_tolower;
}; // struct lc_ctype

struct lc_collate {
	lc_collate()
	: m_collate{}, p_collate{false} { }

	std::vector<std::string> &collate() {
		return m_collate;
	}

	std::string &collate(size_t i) {
		return m_collate[i];
	}

	size_t collate_size() {
		return m_collate.size();
	}

	void set_collate(std::vector<std::string> val) {
		p_collate = true;
		m_collate = val;
	}

	void set_collate(size_t i, std::string val) {
		p_collate = true;
		m_collate[i] = val;
	}

	void add_collate(std::string v) {
		p_collate = true;
		m_collate.push_back(v);
	}

	size_t size_of_body() {
		size_t size = 0;
		size += bragi::detail::size_of_varint(m_collate.size());
		for (size_t i0 = 0; i0 < m_collate.size(); i0++) {
			size += bragi::detail::size_of_varint(m_collate[i0].size());
			size += m_collate[i0].size();
		}

		return size;
	}

	template <typename Writer>
	bool encode_body(Writer &wr, bragi::serializer &sr) {
		(void)wr;
		(void)sr;

		if (!sr.write_varint(wr, m_collate.size()))
			return false;
		for (size_t i0 = 0; i0 < m_collate.size(); i0++) {
			if (!sr.write_varint(wr, m_collate[i0].size()))
				return false;
			for (size_t i1 = 0; i1 < m_collate[i0].size(); i1++) {
				if (!sr.write_integer<char>(wr, m_collate[i0][i1]))
					return false;
			}
		}
		return true;
	}

	template <typename Reader>
	bool decode_body(Reader &rd, bragi::deserializer &de) {
		(void)rd;
		(void)de;
		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_collate.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				{
					uint64_t size;
					if (!de.read_varint(rd, size))
						return false;
					m_collate[i0].resize(size);
					for (size_t i1 = 0; i1 < size; i1++)
						if (!de.read_integer<char>(rd, m_collate[i0][i1]))
							return false;
				}
		}
		p_collate = true;

		return true;
	}

private:
	std::vector<std::string> m_collate; bool p_collate;
}; // struct lc_collate

struct lc_time {
	lc_time()
	: m_day{}, p_day{false}, 
	  m_abday{}, p_abday{false}, 
	  m_mon{}, p_mon{false}, 
	  m_abmon{}, p_abmon{false}, 
	  m_am_pm{}, p_am_pm{false}, 
	  m_alt_digits{}, p_alt_digits{false}, 
	  m_d_t_fmt{}, p_d_t_fmt{false}, 
	  m_d_fmt{}, p_d_fmt{false}, 
	  m_t_fmt{}, p_t_fmt{false}, 
	  m_t_fmt_ampm{}, p_t_fmt_ampm{false}, 
	  m_date_fmt{}, p_date_fmt{false}, 
	  m_era{}, p_era{false}, 
	  m_era_d_fmt{}, p_era_d_fmt{false}, 
	  m_era_t_fmt{}, p_era_t_fmt{false}, 
	  m_era_d_t_fmt{}, p_era_d_t_fmt{false} { }

	std::vector<std::string> &day() {
		return m_day;
	}

	std::string &day(size_t i) {
		return m_day[i];
	}

	size_t day_size() {
		return m_day.size();
	}

	void set_day(std::vector<std::string> val) {
		p_day = true;
		m_day = val;
	}

	void set_day(size_t i, std::string val) {
		p_day = true;
		m_day[i] = val;
	}

	void add_day(std::string v) {
		p_day = true;
		m_day.push_back(v);
	}

	std::vector<std::string> &abday() {
		return m_abday;
	}

	std::string &abday(size_t i) {
		return m_abday[i];
	}

	size_t abday_size() {
		return m_abday.size();
	}

	void set_abday(std::vector<std::string> val) {
		p_abday = true;
		m_abday = val;
	}

	void set_abday(size_t i, std::string val) {
		p_abday = true;
		m_abday[i] = val;
	}

	void add_abday(std::string v) {
		p_abday = true;
		m_abday.push_back(v);
	}

	std::vector<std::string> &mon() {
		return m_mon;
	}

	std::string &mon(size_t i) {
		return m_mon[i];
	}

	size_t mon_size() {
		return m_mon.size();
	}

	void set_mon(std::vector<std::string> val) {
		p_mon = true;
		m_mon = val;
	}

	void set_mon(size_t i, std::string val) {
		p_mon = true;
		m_mon[i] = val;
	}

	void add_mon(std::string v) {
		p_mon = true;
		m_mon.push_back(v);
	}

	std::vector<std::string> &abmon() {
		return m_abmon;
	}

	std::string &abmon(size_t i) {
		return m_abmon[i];
	}

	size_t abmon_size() {
		return m_abmon.size();
	}

	void set_abmon(std::vector<std::string> val) {
		p_abmon = true;
		m_abmon = val;
	}

	void set_abmon(size_t i, std::string val) {
		p_abmon = true;
		m_abmon[i] = val;
	}

	void add_abmon(std::string v) {
		p_abmon = true;
		m_abmon.push_back(v);
	}

	std::vector<std::string> &am_pm() {
		return m_am_pm;
	}

	std::string &am_pm(size_t i) {
		return m_am_pm[i];
	}

	size_t am_pm_size() {
		return m_am_pm.size();
	}

	void set_am_pm(std::vector<std::string> val) {
		p_am_pm = true;
		m_am_pm = val;
	}

	void set_am_pm(size_t i, std::string val) {
		p_am_pm = true;
		m_am_pm[i] = val;
	}

	void add_am_pm(std::string v) {
		p_am_pm = true;
		m_am_pm.push_back(v);
	}

	std::vector<std::string> &alt_digits() {
		return m_alt_digits;
	}

	std::string &alt_digits(size_t i) {
		return m_alt_digits[i];
	}

	size_t alt_digits_size() {
		return m_alt_digits.size();
	}

	void set_alt_digits(std::vector<std::string> val) {
		p_alt_digits = true;
		m_alt_digits = val;
	}

	void set_alt_digits(size_t i, std::string val) {
		p_alt_digits = true;
		m_alt_digits[i] = val;
	}

	void add_alt_digits(std::string v) {
		p_alt_digits = true;
		m_alt_digits.push_back(v);
	}

	std::string &d_t_fmt() {
		return m_d_t_fmt;
	}

	void set_d_t_fmt(std::string val) {
		p_d_t_fmt = true;
		m_d_t_fmt = val;
	}

	std::string &d_fmt() {
		return m_d_fmt;
	}

	void set_d_fmt(std::string val) {
		p_d_fmt = true;
		m_d_fmt = val;
	}

	std::string &t_fmt() {
		return m_t_fmt;
	}

	void set_t_fmt(std::string val) {
		p_t_fmt = true;
		m_t_fmt = val;
	}

	std::string &t_fmt_ampm() {
		return m_t_fmt_ampm;
	}

	void set_t_fmt_ampm(std::string val) {
		p_t_fmt_ampm = true;
		m_t_fmt_ampm = val;
	}

	std::string &date_fmt() {
		return m_date_fmt;
	}

	void set_date_fmt(std::string val) {
		p_date_fmt = true;
		m_date_fmt = val;
	}

	std::string &era() {
		return m_era;
	}

	void set_era(std::string val) {
		p_era = true;
		m_era = val;
	}

	std::string &era_d_fmt() {
		return m_era_d_fmt;
	}

	void set_era_d_fmt(std::string val) {
		p_era_d_fmt = true;
		m_era_d_fmt = val;
	}

	std::string &era_t_fmt() {
		return m_era_t_fmt;
	}

	void set_era_t_fmt(std::string val) {
		p_era_t_fmt = true;
		m_era_t_fmt = val;
	}

	std::string &era_d_t_fmt() {
		return m_era_d_t_fmt;
	}

	void set_era_d_t_fmt(std::string val) {
		p_era_d_t_fmt = true;
		m_era_d_t_fmt = val;
	}

	size_t size_of_body() {
		size_t size = 0;
		size += bragi::detail::size_of_varint(m_day.size());
		for (size_t i0 = 0; i0 < m_day.size(); i0++) {
			size += bragi::detail::size_of_varint(m_day[i0].size());
			size += m_day[i0].size();
		}
		size += bragi::detail::size_of_varint(m_abday.size());
		for (size_t i0 = 0; i0 < m_abday.size(); i0++) {
			size += bragi::detail::size_of_varint(m_abday[i0].size());
			size += m_abday[i0].size();
		}
		size += bragi::detail::size_of_varint(m_mon.size());
		for (size_t i0 = 0; i0 < m_mon.size(); i0++) {
			size += bragi::detail::size_of_varint(m_mon[i0].size());
			size += m_mon[i0].size();
		}
		size += bragi::detail::size_of_varint(m_abmon.size());
		for (size_t i0 = 0; i0 < m_abmon.size(); i0++) {
			size += bragi::detail::size_of_varint(m_abmon[i0].size());
			size += m_abmon[i0].size();
		}
		size += bragi::detail::size_of_varint(m_am_pm.size());
		for (size_t i0 = 0; i0 < m_am_pm.size(); i0++) {
			size += bragi::detail::size_of_varint(m_am_pm[i0].size());
			size += m_am_pm[i0].size();
		}
		size += bragi::detail::size_of_varint(m_alt_digits.size());
		for (size_t i0 = 0; i0 < m_alt_digits.size(); i0++) {
			size += bragi::detail::size_of_varint(m_alt_digits[i0].size());
			size += m_alt_digits[i0].size();
		}
		size += bragi::detail::size_of_varint(m_d_t_fmt.size());
		size += m_d_t_fmt.size();
		size += bragi::detail::size_of_varint(m_d_fmt.size());
		size += m_d_fmt.size();
		size += bragi::detail::size_of_varint(m_t_fmt.size());
		size += m_t_fmt.size();
		size += bragi::detail::size_of_varint(m_t_fmt_ampm.size());
		size += m_t_fmt_ampm.size();
		size += bragi::detail::size_of_varint(m_date_fmt.size());
		size += m_date_fmt.size();
		size += bragi::detail::size_of_varint(m_era.size());
		size += m_era.size();
		size += bragi::detail::size_of_varint(m_era_d_fmt.size());
		size += m_era_d_fmt.size();
		size += bragi::detail::size_of_varint(m_era_t_fmt.size());
		size += m_era_t_fmt.size();
		size += bragi::detail::size_of_varint(m_era_d_t_fmt.size());
		size += m_era_d_t_fmt.size();

		return size;
	}

	template <typename Writer>
	bool encode_body(Writer &wr, bragi::serializer &sr) {
		(void)wr;
		(void)sr;

		if (!sr.write_varint(wr, m_day.size()))
			return false;
		for (size_t i0 = 0; i0 < m_day.size(); i0++) {
			if (!sr.write_varint(wr, m_day[i0].size()))
				return false;
			for (size_t i1 = 0; i1 < m_day[i0].size(); i1++) {
				if (!sr.write_integer<char>(wr, m_day[i0][i1]))
					return false;
			}
		}
		if (!sr.write_varint(wr, m_abday.size()))
			return false;
		for (size_t i0 = 0; i0 < m_abday.size(); i0++) {
			if (!sr.write_varint(wr, m_abday[i0].size()))
				return false;
			for (size_t i1 = 0; i1 < m_abday[i0].size(); i1++) {
				if (!sr.write_integer<char>(wr, m_abday[i0][i1]))
					return false;
			}
		}
		if (!sr.write_varint(wr, m_mon.size()))
			return false;
		for (size_t i0 = 0; i0 < m_mon.size(); i0++) {
			if (!sr.write_varint(wr, m_mon[i0].size()))
				return false;
			for (size_t i1 = 0; i1 < m_mon[i0].size(); i1++) {
				if (!sr.write_integer<char>(wr, m_mon[i0][i1]))
					return false;
			}
		}
		if (!sr.write_varint(wr, m_abmon.size()))
			return false;
		for (size_t i0 = 0; i0 < m_abmon.size(); i0++) {
			if (!sr.write_varint(wr, m_abmon[i0].size()))
				return false;
			for (size_t i1 = 0; i1 < m_abmon[i0].size(); i1++) {
				if (!sr.write_integer<char>(wr, m_abmon[i0][i1]))
					return false;
			}
		}
		if (!sr.write_varint(wr, m_am_pm.size()))
			return false;
		for (size_t i0 = 0; i0 < m_am_pm.size(); i0++) {
			if (!sr.write_varint(wr, m_am_pm[i0].size()))
				return false;
			for (size_t i1 = 0; i1 < m_am_pm[i0].size(); i1++) {
				if (!sr.write_integer<char>(wr, m_am_pm[i0][i1]))
					return false;
			}
		}
		if (!sr.write_varint(wr, m_alt_digits.size()))
			return false;
		for (size_t i0 = 0; i0 < m_alt_digits.size(); i0++) {
			if (!sr.write_varint(wr, m_alt_digits[i0].size()))
				return false;
			for (size_t i1 = 0; i1 < m_alt_digits[i0].size(); i1++) {
				if (!sr.write_integer<char>(wr, m_alt_digits[i0][i1]))
					return false;
			}
		}
		if (!sr.write_varint(wr, m_d_t_fmt.size()))
			return false;
		for (size_t i0 = 0; i0 < m_d_t_fmt.size(); i0++) {
			if (!sr.write_integer<char>(wr, m_d_t_fmt[i0]))
				return false;
		}
		if (!sr.write_varint(wr, m_d_fmt.size()))
			return false;
		for (size_t i0 = 0; i0 < m_d_fmt.size(); i0++) {
			if (!sr.write_integer<char>(wr, m_d_fmt[i0]))
				return false;
		}
		if (!sr.write_varint(wr, m_t_fmt.size()))
			return false;
		for (size_t i0 = 0; i0 < m_t_fmt.size(); i0++) {
			if (!sr.write_integer<char>(wr, m_t_fmt[i0]))
				return false;
		}
		if (!sr.write_varint(wr, m_t_fmt_ampm.size()))
			return false;
		for (size_t i0 = 0; i0 < m_t_fmt_ampm.size(); i0++) {
			if (!sr.write_integer<char>(wr, m_t_fmt_ampm[i0]))
				return false;
		}
		if (!sr.write_varint(wr, m_date_fmt.size()))
			return false;
		for (size_t i0 = 0; i0 < m_date_fmt.size(); i0++) {
			if (!sr.write_integer<char>(wr, m_date_fmt[i0]))
				return false;
		}
		if (!sr.write_varint(wr, m_era.size()))
			return false;
		for (size_t i0 = 0; i0 < m_era.size(); i0++) {
			if (!sr.write_integer<char>(wr, m_era[i0]))
				return false;
		}
		if (!sr.write_varint(wr, m_era_d_fmt.size()))
			return false;
		for (size_t i0 = 0; i0 < m_era_d_fmt.size(); i0++) {
			if (!sr.write_integer<char>(wr, m_era_d_fmt[i0]))
				return false;
		}
		if (!sr.write_varint(wr, m_era_t_fmt.size()))
			return false;
		for (size_t i0 = 0; i0 < m_era_t_fmt.size(); i0++) {
			if (!sr.write_integer<char>(wr, m_era_t_fmt[i0]))
				return false;
		}
		if (!sr.write_varint(wr, m_era_d_t_fmt.size()))
			return false;
		for (size_t i0 = 0; i0 < m_era_d_t_fmt.size(); i0++) {
			if (!sr.write_integer<char>(wr, m_era_d_t_fmt[i0]))
				return false;
		}
		return true;
	}

	template <typename Reader>
	bool decode_body(Reader &rd, bragi::deserializer &de) {
		(void)rd;
		(void)de;
		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_day.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				{
					uint64_t size;
					if (!de.read_varint(rd, size))
						return false;
					m_day[i0].resize(size);
					for (size_t i1 = 0; i1 < size; i1++)
						if (!de.read_integer<char>(rd, m_day[i0][i1]))
							return false;
				}
		}
		p_day = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_abday.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				{
					uint64_t size;
					if (!de.read_varint(rd, size))
						return false;
					m_abday[i0].resize(size);
					for (size_t i1 = 0; i1 < size; i1++)
						if (!de.read_integer<char>(rd, m_abday[i0][i1]))
							return false;
				}
		}
		p_abday = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_mon.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				{
					uint64_t size;
					if (!de.read_varint(rd, size))
						return false;
					m_mon[i0].resize(size);
					for (size_t i1 = 0; i1 < size; i1++)
						if (!de.read_integer<char>(rd, m_mon[i0][i1]))
							return false;
				}
		}
		p_mon = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_abmon.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				{
					uint64_t size;
					if (!de.read_varint(rd, size))
						return false;
					m_abmon[i0].resize(size);
					for (size_t i1 = 0; i1 < size; i1++)
						if (!de.read_integer<char>(rd, m_abmon[i0][i1]))
							return false;
				}
		}
		p_abmon = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_am_pm.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				{
					uint64_t size;
					if (!de.read_varint(rd, size))
						return false;
					m_am_pm[i0].resize(size);
					for (size_t i1 = 0; i1 < size; i1++)
						if (!de.read_integer<char>(rd, m_am_pm[i0][i1]))
							return false;
				}
		}
		p_am_pm = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_alt_digits.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				{
					uint64_t size;
					if (!de.read_varint(rd, size))
						return false;
					m_alt_digits[i0].resize(size);
					for (size_t i1 = 0; i1 < size; i1++)
						if (!de.read_integer<char>(rd, m_alt_digits[i0][i1]))
							return false;
				}
		}
		p_alt_digits = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_d_t_fmt.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				if (!de.read_integer<char>(rd, m_d_t_fmt[i0]))
					return false;
		}
		p_d_t_fmt = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_d_fmt.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				if (!de.read_integer<char>(rd, m_d_fmt[i0]))
					return false;
		}
		p_d_fmt = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_t_fmt.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				if (!de.read_integer<char>(rd, m_t_fmt[i0]))
					return false;
		}
		p_t_fmt = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_t_fmt_ampm.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				if (!de.read_integer<char>(rd, m_t_fmt_ampm[i0]))
					return false;
		}
		p_t_fmt_ampm = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_date_fmt.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				if (!de.read_integer<char>(rd, m_date_fmt[i0]))
					return false;
		}
		p_date_fmt = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_era.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				if (!de.read_integer<char>(rd, m_era[i0]))
					return false;
		}
		p_era = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_era_d_fmt.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				if (!de.read_integer<char>(rd, m_era_d_fmt[i0]))
					return false;
		}
		p_era_d_fmt = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_era_t_fmt.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				if (!de.read_integer<char>(rd, m_era_t_fmt[i0]))
					return false;
		}
		p_era_t_fmt = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_era_d_t_fmt.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				if (!de.read_integer<char>(rd, m_era_d_t_fmt[i0]))
					return false;
		}
		p_era_d_t_fmt = true;

		return true;
	}

private:
	std::vector<std::string> m_day; bool p_day;
	std::vector<std::string> m_abday; bool p_abday;
	std::vector<std::string> m_mon; bool p_mon;
	std::vector<std::string> m_abmon; bool p_abmon;
	std::vector<std::string> m_am_pm; bool p_am_pm;
	std::vector<std::string> m_alt_digits; bool p_alt_digits;
	std::string m_d_t_fmt; bool p_d_t_fmt;
	std::string m_d_fmt; bool p_d_fmt;
	std::string m_t_fmt; bool p_t_fmt;
	std::string m_t_fmt_ampm; bool p_t_fmt_ampm;
	std::string m_date_fmt; bool p_date_fmt;
	std::string m_era; bool p_era;
	std::string m_era_d_fmt; bool p_era_d_fmt;
	std::string m_era_t_fmt; bool p_era_t_fmt;
	std::string m_era_d_t_fmt; bool p_era_d_t_fmt;
}; // struct lc_time

struct lc_numeric {
	lc_numeric()
	: m_decimal_point{}, p_decimal_point{false}, 
	  m_thousands_sep{}, p_thousands_sep{false}, 
	  m_grouping{}, p_grouping{false} { }

	std::string &decimal_point() {
		return m_decimal_point;
	}

	void set_decimal_point(std::string val) {
		p_decimal_point = true;
		m_decimal_point = val;
	}

	std::string &thousands_sep() {
		return m_thousands_sep;
	}

	void set_thousands_sep(std::string val) {
		p_thousands_sep = true;
		m_thousands_sep = val;
	}

	std::string &grouping() {
		return m_grouping;
	}

	void set_grouping(std::string val) {
		p_grouping = true;
		m_grouping = val;
	}

	size_t size_of_body() {
		size_t size = 0;
		size += bragi::detail::size_of_varint(m_decimal_point.size());
		size += m_decimal_point.size();
		size += bragi::detail::size_of_varint(m_thousands_sep.size());
		size += m_thousands_sep.size();
		size += bragi::detail::size_of_varint(m_grouping.size());
		size += m_grouping.size();

		return size;
	}

	template <typename Writer>
	bool encode_body(Writer &wr, bragi::serializer &sr) {
		(void)wr;
		(void)sr;

		if (!sr.write_varint(wr, m_decimal_point.size()))
			return false;
		for (size_t i0 = 0; i0 < m_decimal_point.size(); i0++) {
			if (!sr.write_integer<char>(wr, m_decimal_point[i0]))
				return false;
		}
		if (!sr.write_varint(wr, m_thousands_sep.size()))
			return false;
		for (size_t i0 = 0; i0 < m_thousands_sep.size(); i0++) {
			if (!sr.write_integer<char>(wr, m_thousands_sep[i0]))
				return false;
		}
		if (!sr.write_varint(wr, m_grouping.size()))
			return false;
		for (size_t i0 = 0; i0 < m_grouping.size(); i0++) {
			if (!sr.write_integer<char>(wr, m_grouping[i0]))
				return false;
		}
		return true;
	}

	template <typename Reader>
	bool decode_body(Reader &rd, bragi::deserializer &de) {
		(void)rd;
		(void)de;
		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_decimal_point.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				if (!de.read_integer<char>(rd, m_decimal_point[i0]))
					return false;
		}
		p_decimal_point = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_thousands_sep.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				if (!de.read_integer<char>(rd, m_thousands_sep[i0]))
					return false;
		}
		p_thousands_sep = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_grouping.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				if (!de.read_integer<char>(rd, m_grouping[i0]))
					return false;
		}
		p_grouping = true;

		return true;
	}

private:
	std::string m_decimal_point; bool p_decimal_point;
	std::string m_thousands_sep; bool p_thousands_sep;
	std::string m_grouping; bool p_grouping;
}; // struct lc_numeric

struct lc_messages {
	lc_messages()
	: m_yesexpr{}, p_yesexpr{false}, 
	  m_noexpr{}, p_noexpr{false}, 
	  m_yesstr{}, p_yesstr{false}, 
	  m_nostr{}, p_nostr{false} { }

	std::string &yesexpr() {
		return m_yesexpr;
	}

	void set_yesexpr(std::string val) {
		p_yesexpr = true;
		m_yesexpr = val;
	}

	std::string &noexpr() {
		return m_noexpr;
	}

	void set_noexpr(std::string val) {
		p_noexpr = true;
		m_noexpr = val;
	}

	std::string &yesstr() {
		return m_yesstr;
	}

	void set_yesstr(std::string val) {
		p_yesstr = true;
		m_yesstr = val;
	}

	std::string &nostr() {
		return m_nostr;
	}

	void set_nostr(std::string val) {
		p_nostr = true;
		m_nostr = val;
	}

	size_t size_of_body() {
		size_t size = 0;
		size += bragi::detail::size_of_varint(m_yesexpr.size());
		size += m_yesexpr.size();
		size += bragi::detail::size_of_varint(m_noexpr.size());
		size += m_noexpr.size();
		size += bragi::detail::size_of_varint(m_yesstr.size());
		size += m_yesstr.size();
		size += bragi::detail::size_of_varint(m_nostr.size());
		size += m_nostr.size();

		return size;
	}

	template <typename Writer>
	bool encode_body(Writer &wr, bragi::serializer &sr) {
		(void)wr;
		(void)sr;

		if (!sr.write_varint(wr, m_yesexpr.size()))
			return false;
		for (size_t i0 = 0; i0 < m_yesexpr.size(); i0++) {
			if (!sr.write_integer<char>(wr, m_yesexpr[i0]))
				return false;
		}
		if (!sr.write_varint(wr, m_noexpr.size()))
			return false;
		for (size_t i0 = 0; i0 < m_noexpr.size(); i0++) {
			if (!sr.write_integer<char>(wr, m_noexpr[i0]))
				return false;
		}
		if (!sr.write_varint(wr, m_yesstr.size()))
			return false;
		for (size_t i0 = 0; i0 < m_yesstr.size(); i0++) {
			if (!sr.write_integer<char>(wr, m_yesstr[i0]))
				return false;
		}
		if (!sr.write_varint(wr, m_nostr.size()))
			return false;
		for (size_t i0 = 0; i0 < m_nostr.size(); i0++) {
			if (!sr.write_integer<char>(wr, m_nostr[i0]))
				return false;
		}
		return true;
	}

	template <typename Reader>
	bool decode_body(Reader &rd, bragi::deserializer &de) {
		(void)rd;
		(void)de;
		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_yesexpr.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				if (!de.read_integer<char>(rd, m_yesexpr[i0]))
					return false;
		}
		p_yesexpr = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_noexpr.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				if (!de.read_integer<char>(rd, m_noexpr[i0]))
					return false;
		}
		p_noexpr = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_yesstr.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				if (!de.read_integer<char>(rd, m_yesstr[i0]))
					return false;
		}
		p_yesstr = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_nostr.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				if (!de.read_integer<char>(rd, m_nostr[i0]))
					return false;
		}
		p_nostr = true;

		return true;
	}

private:
	std::string m_yesexpr; bool p_yesexpr;
	std::string m_noexpr; bool p_noexpr;
	std::string m_yesstr; bool p_yesstr;
	std::string m_nostr; bool p_nostr;
}; // struct lc_messages

struct lc_monetary {
	lc_monetary()
	: m_int_curr_symbol{}, p_int_curr_symbol{false}, 
	  m_currency_symbol{}, p_currency_symbol{false}, 
	  m_mon_decimal_point{}, p_mon_decimal_point{false}, 
	  m_mon_thousands_sep{}, p_mon_thousands_sep{false}, 
	  m_mon_grouping{}, p_mon_grouping{false}, 
	  m_positive_sign{}, p_positive_sign{false}, 
	  m_negative_sign{}, p_negative_sign{false}, 
	  m_int_frac_digits{}, p_int_frac_digits{false}, 
	  m_frac_digits{}, p_frac_digits{false}, 
	  m_p_cs_precedes{}, p_p_cs_precedes{false}, 
	  m_p_sep_by_space{}, p_p_sep_by_space{false}, 
	  m_n_cs_precedes{}, p_n_cs_precedes{false}, 
	  m_n_sep_by_space{}, p_n_sep_by_space{false}, 
	  m_p_sign_posn{}, p_p_sign_posn{false}, 
	  m_n_sign_posn{}, p_n_sign_posn{false}, 
	  m_int_p_cs_precedes{}, p_int_p_cs_precedes{false}, 
	  m_int_p_sep_by_space{}, p_int_p_sep_by_space{false}, 
	  m_int_n_cs_precedes{}, p_int_n_cs_precedes{false}, 
	  m_int_n_sep_by_space{}, p_int_n_sep_by_space{false}, 
	  m_int_p_sign_posn{}, p_int_p_sign_posn{false}, 
	  m_int_n_sign_posn{}, p_int_n_sign_posn{false} { }

	std::string &int_curr_symbol() {
		return m_int_curr_symbol;
	}

	void set_int_curr_symbol(std::string val) {
		p_int_curr_symbol = true;
		m_int_curr_symbol = val;
	}

	std::string &currency_symbol() {
		return m_currency_symbol;
	}

	void set_currency_symbol(std::string val) {
		p_currency_symbol = true;
		m_currency_symbol = val;
	}

	std::string &mon_decimal_point() {
		return m_mon_decimal_point;
	}

	void set_mon_decimal_point(std::string val) {
		p_mon_decimal_point = true;
		m_mon_decimal_point = val;
	}

	std::string &mon_thousands_sep() {
		return m_mon_thousands_sep;
	}

	void set_mon_thousands_sep(std::string val) {
		p_mon_thousands_sep = true;
		m_mon_thousands_sep = val;
	}

	std::string &mon_grouping() {
		return m_mon_grouping;
	}

	void set_mon_grouping(std::string val) {
		p_mon_grouping = true;
		m_mon_grouping = val;
	}

	std::string &positive_sign() {
		return m_positive_sign;
	}

	void set_positive_sign(std::string val) {
		p_positive_sign = true;
		m_positive_sign = val;
	}

	std::string &negative_sign() {
		return m_negative_sign;
	}

	void set_negative_sign(std::string val) {
		p_negative_sign = true;
		m_negative_sign = val;
	}

	uint8_t int_frac_digits() {
		return m_int_frac_digits;
	}

	void set_int_frac_digits(uint8_t val) {
		p_int_frac_digits = true;
		m_int_frac_digits = val;
	}

	uint8_t frac_digits() {
		return m_frac_digits;
	}

	void set_frac_digits(uint8_t val) {
		p_frac_digits = true;
		m_frac_digits = val;
	}

	uint8_t p_cs_precedes() {
		return m_p_cs_precedes;
	}

	void set_p_cs_precedes(uint8_t val) {
		p_p_cs_precedes = true;
		m_p_cs_precedes = val;
	}

	uint8_t p_sep_by_space() {
		return m_p_sep_by_space;
	}

	void set_p_sep_by_space(uint8_t val) {
		p_p_sep_by_space = true;
		m_p_sep_by_space = val;
	}

	uint8_t n_cs_precedes() {
		return m_n_cs_precedes;
	}

	void set_n_cs_precedes(uint8_t val) {
		p_n_cs_precedes = true;
		m_n_cs_precedes = val;
	}

	uint8_t n_sep_by_space() {
		return m_n_sep_by_space;
	}

	void set_n_sep_by_space(uint8_t val) {
		p_n_sep_by_space = true;
		m_n_sep_by_space = val;
	}

	uint8_t p_sign_posn() {
		return m_p_sign_posn;
	}

	void set_p_sign_posn(uint8_t val) {
		p_p_sign_posn = true;
		m_p_sign_posn = val;
	}

	uint8_t n_sign_posn() {
		return m_n_sign_posn;
	}

	void set_n_sign_posn(uint8_t val) {
		p_n_sign_posn = true;
		m_n_sign_posn = val;
	}

	uint8_t int_p_cs_precedes() {
		return m_int_p_cs_precedes;
	}

	void set_int_p_cs_precedes(uint8_t val) {
		p_int_p_cs_precedes = true;
		m_int_p_cs_precedes = val;
	}

	uint8_t int_p_sep_by_space() {
		return m_int_p_sep_by_space;
	}

	void set_int_p_sep_by_space(uint8_t val) {
		p_int_p_sep_by_space = true;
		m_int_p_sep_by_space = val;
	}

	uint8_t int_n_cs_precedes() {
		return m_int_n_cs_precedes;
	}

	void set_int_n_cs_precedes(uint8_t val) {
		p_int_n_cs_precedes = true;
		m_int_n_cs_precedes = val;
	}

	uint8_t int_n_sep_by_space() {
		return m_int_n_sep_by_space;
	}

	void set_int_n_sep_by_space(uint8_t val) {
		p_int_n_sep_by_space = true;
		m_int_n_sep_by_space = val;
	}

	uint8_t int_p_sign_posn() {
		return m_int_p_sign_posn;
	}

	void set_int_p_sign_posn(uint8_t val) {
		p_int_p_sign_posn = true;
		m_int_p_sign_posn = val;
	}

	uint8_t int_n_sign_posn() {
		return m_int_n_sign_posn;
	}

	void set_int_n_sign_posn(uint8_t val) {
		p_int_n_sign_posn = true;
		m_int_n_sign_posn = val;
	}

	size_t size_of_body() {
		size_t size = 0;
		size += bragi::detail::size_of_varint(m_int_curr_symbol.size());
		size += m_int_curr_symbol.size();
		size += bragi::detail::size_of_varint(m_currency_symbol.size());
		size += m_currency_symbol.size();
		size += bragi::detail::size_of_varint(m_mon_decimal_point.size());
		size += m_mon_decimal_point.size();
		size += bragi::detail::size_of_varint(m_mon_thousands_sep.size());
		size += m_mon_thousands_sep.size();
		size += bragi::detail::size_of_varint(m_mon_grouping.size());
		size += m_mon_grouping.size();
		size += bragi::detail::size_of_varint(m_positive_sign.size());
		size += m_positive_sign.size();
		size += bragi::detail::size_of_varint(m_negative_sign.size());
		size += m_negative_sign.size();
		size += 1;
		size += 1;
		size += 1;
		size += 1;
		size += 1;
		size += 1;
		size += 1;
		size += 1;
		size += 1;
		size += 1;
		size += 1;
		size += 1;
		size += 1;
		size += 1;

		return size;
	}

	template <typename Writer>
	bool encode_body(Writer &wr, bragi::serializer &sr) {
		(void)wr;
		(void)sr;

		if (!sr.write_varint(wr, m_int_curr_symbol.size()))
			return false;
		for (size_t i0 = 0; i0 < m_int_curr_symbol.size(); i0++) {
			if (!sr.write_integer<char>(wr, m_int_curr_symbol[i0]))
				return false;
		}
		if (!sr.write_varint(wr, m_currency_symbol.size()))
			return false;
		for (size_t i0 = 0; i0 < m_currency_symbol.size(); i0++) {
			if (!sr.write_integer<char>(wr, m_currency_symbol[i0]))
				return false;
		}
		if (!sr.write_varint(wr, m_mon_decimal_point.size()))
			return false;
		for (size_t i0 = 0; i0 < m_mon_decimal_point.size(); i0++) {
			if (!sr.write_integer<char>(wr, m_mon_decimal_point[i0]))
				return false;
		}
		if (!sr.write_varint(wr, m_mon_thousands_sep.size()))
			return false;
		for (size_t i0 = 0; i0 < m_mon_thousands_sep.size(); i0++) {
			if (!sr.write_integer<char>(wr, m_mon_thousands_sep[i0]))
				return false;
		}
		if (!sr.write_varint(wr, m_mon_grouping.size()))
			return false;
		for (size_t i0 = 0; i0 < m_mon_grouping.size(); i0++) {
			if (!sr.write_integer<char>(wr, m_mon_grouping[i0]))
				return false;
		}
		if (!sr.write_varint(wr, m_positive_sign.size()))
			return false;
		for (size_t i0 = 0; i0 < m_positive_sign.size(); i0++) {
			if (!sr.write_integer<char>(wr, m_positive_sign[i0]))
				return false;
		}
		if (!sr.write_varint(wr, m_negative_sign.size()))
			return false;
		for (size_t i0 = 0; i0 < m_negative_sign.size(); i0++) {
			if (!sr.write_integer<char>(wr, m_negative_sign[i0]))
				return false;
		}
		if (!sr.write_integer<uint8_t>(wr, m_int_frac_digits))
			return false;
		if (!sr.write_integer<uint8_t>(wr, m_frac_digits))
			return false;
		if (!sr.write_integer<uint8_t>(wr, m_p_cs_precedes))
			return false;
		if (!sr.write_integer<uint8_t>(wr, m_p_sep_by_space))
			return false;
		if (!sr.write_integer<uint8_t>(wr, m_n_cs_precedes))
			return false;
		if (!sr.write_integer<uint8_t>(wr, m_n_sep_by_space))
			return false;
		if (!sr.write_integer<uint8_t>(wr, m_p_sign_posn))
			return false;
		if (!sr.write_integer<uint8_t>(wr, m_n_sign_posn))
			return false;
		if (!sr.write_integer<uint8_t>(wr, m_int_p_cs_precedes))
			return false;
		if (!sr.write_integer<uint8_t>(wr, m_int_p_sep_by_space))
			return false;
		if (!sr.write_integer<uint8_t>(wr, m_int_n_cs_precedes))
			return false;
		if (!sr.write_integer<uint8_t>(wr, m_int_n_sep_by_space))
			return false;
		if (!sr.write_integer<uint8_t>(wr, m_int_p_sign_posn))
			return false;
		if (!sr.write_integer<uint8_t>(wr, m_int_n_sign_posn))
			return false;
		return true;
	}

	template <typename Reader>
	bool decode_body(Reader &rd, bragi::deserializer &de) {
		(void)rd;
		(void)de;
		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_int_curr_symbol.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				if (!de.read_integer<char>(rd, m_int_curr_symbol[i0]))
					return false;
		}
		p_int_curr_symbol = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_currency_symbol.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				if (!de.read_integer<char>(rd, m_currency_symbol[i0]))
					return false;
		}
		p_currency_symbol = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_mon_decimal_point.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				if (!de.read_integer<char>(rd, m_mon_decimal_point[i0]))
					return false;
		}
		p_mon_decimal_point = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_mon_thousands_sep.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				if (!de.read_integer<char>(rd, m_mon_thousands_sep[i0]))
					return false;
		}
		p_mon_thousands_sep = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_mon_grouping.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				if (!de.read_integer<char>(rd, m_mon_grouping[i0]))
					return false;
		}
		p_mon_grouping = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_positive_sign.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				if (!de.read_integer<char>(rd, m_positive_sign[i0]))
					return false;
		}
		p_positive_sign = true;

		{
			uint64_t size;
			if (!de.read_varint(rd, size))
				return false;
			m_negative_sign.resize(size);
			for (size_t i0 = 0; i0 < size; i0++)
				if (!de.read_integer<char>(rd, m_negative_sign[i0]))
					return false;
		}
		p_negative_sign = true;

		if (!de.read_integer<uint8_t>(rd, m_int_frac_digits))
			return false;
		p_int_frac_digits = true;

		if (!de.read_integer<uint8_t>(rd, m_frac_digits))
			return false;
		p_frac_digits = true;

		if (!de.read_integer<uint8_t>(rd, m_p_cs_precedes))
			return false;
		p_p_cs_precedes = true;

		if (!de.read_integer<uint8_t>(rd, m_p_sep_by_space))
			return false;
		p_p_sep_by_space = true;

		if (!de.read_integer<uint8_t>(rd, m_n_cs_precedes))
			return false;
		p_n_cs_precedes = true;

		if (!de.read_integer<uint8_t>(rd, m_n_sep_by_space))
			return false;
		p_n_sep_by_space = true;

		if (!de.read_integer<uint8_t>(rd, m_p_sign_posn))
			return false;
		p_p_sign_posn = true;

		if (!de.read_integer<uint8_t>(rd, m_n_sign_posn))
			return false;
		p_n_sign_posn = true;

		if (!de.read_integer<uint8_t>(rd, m_int_p_cs_precedes))
			return false;
		p_int_p_cs_precedes = true;

		if (!de.read_integer<uint8_t>(rd, m_int_p_sep_by_space))
			return false;
		p_int_p_sep_by_space = true;

		if (!de.read_integer<uint8_t>(rd, m_int_n_cs_precedes))
			return false;
		p_int_n_cs_precedes = true;

		if (!de.read_integer<uint8_t>(rd, m_int_n_sep_by_space))
			return false;
		p_int_n_sep_by_space = true;

		if (!de.read_integer<uint8_t>(rd, m_int_p_sign_posn))
			return false;
		p_int_p_sign_posn = true;

		if (!de.read_integer<uint8_t>(rd, m_int_n_sign_posn))
			return false;
		p_int_n_sign_posn = true;

		return true;
	}

private:
	std::string m_int_curr_symbol; bool p_int_curr_symbol;
	std::string m_currency_symbol; bool p_currency_symbol;
	std::string m_mon_decimal_point; bool p_mon_decimal_point;
	std::string m_mon_thousands_sep; bool p_mon_thousands_sep;
	std::string m_mon_grouping; bool p_mon_grouping;
	std::string m_positive_sign; bool p_positive_sign;
	std::string m_negative_sign; bool p_negative_sign;
	uint8_t m_int_frac_digits; bool p_int_frac_digits;
	uint8_t m_frac_digits; bool p_frac_digits;
	uint8_t m_p_cs_precedes; bool p_p_cs_precedes;
	uint8_t m_p_sep_by_space; bool p_p_sep_by_space;
	uint8_t m_n_cs_precedes; bool p_n_cs_precedes;
	uint8_t m_n_sep_by_space; bool p_n_sep_by_space;
	uint8_t m_p_sign_posn; bool p_p_sign_posn;
	uint8_t m_n_sign_posn; bool p_n_sign_posn;
	uint8_t m_int_p_cs_precedes; bool p_int_p_cs_precedes;
	uint8_t m_int_p_sep_by_space; bool p_int_p_sep_by_space;
	uint8_t m_int_n_cs_precedes; bool p_int_n_cs_precedes;
	uint8_t m_int_n_sep_by_space; bool p_int_n_sep_by_space;
	uint8_t m_int_p_sign_posn; bool p_int_p_sign_posn;
	uint8_t m_int_n_sign_posn; bool p_int_n_sign_posn;
}; // struct lc_monetary

struct Locale {
	static constexpr uint32_t message_id = 1;
	static constexpr size_t head_size = 8;

	Locale()
	: m_section_ctype{}, p_section_ctype{false}, 
	  m_section_collate{}, p_section_collate{false}, 
	  m_section_time{}, p_section_time{false}, 
	  m_section_numeric{}, p_section_numeric{false}, 
	  m_section_messages{}, p_section_messages{false}, 
	  m_section_monetary{}, p_section_monetary{false} { }

	lc_ctype &section_ctype() {
		return m_section_ctype;
	}

	void set_section_ctype(lc_ctype val) {
		p_section_ctype = true;
		m_section_ctype = val;
	}

	lc_collate &section_collate() {
		return m_section_collate;
	}

	void set_section_collate(lc_collate val) {
		p_section_collate = true;
		m_section_collate = val;
	}

	lc_time &section_time() {
		return m_section_time;
	}

	void set_section_time(lc_time val) {
		p_section_time = true;
		m_section_time = val;
	}

	lc_numeric &section_numeric() {
		return m_section_numeric;
	}

	void set_section_numeric(lc_numeric val) {
		p_section_numeric = true;
		m_section_numeric = val;
	}

	lc_messages &section_messages() {
		return m_section_messages;
	}

	void set_section_messages(lc_messages val) {
		p_section_messages = true;
		m_section_messages = val;
	}

	lc_monetary &section_monetary() {
		return m_section_monetary;
	}

	void set_section_monetary(lc_monetary val) {
		p_section_monetary = true;
		m_section_monetary = val;
	}

	size_t size_of_head() {
		size_t size = 8;

		return size;
	}

	template <typename Writer>
	bool encode_head(Writer &wr) {
		(void)wr;
		bragi::serializer sr; (void)sr;

		// Encode ID
		if (!sr.template write_integer<uint32_t>(wr, message_id))
			return false;
		// Encode tail size
		if (!sr.template write_integer<uint32_t>(wr, size_of_tail()))
			return false;
		return true;
	}

	template <typename Reader>
	bool decode_head(Reader &rd) {
		(void)rd;
		bragi::deserializer de; (void)de;
		{
			uint32_t tmp;
			// Decode and check ID
			if (!de.read_integer<uint32_t>(rd, tmp))
				return false;
			if (!(tmp == message_id))
				return false;

			// Decode and ignore tail size
			if (!de.read_integer<uint32_t>(rd, tmp))
				return false;
		}

		return true;
	}

	size_t size_of_tail() {
		size_t size = 48;
		size += m_section_ctype.size_of_body();
		size += m_section_collate.size_of_body();
		size += m_section_time.size_of_body();
		size += m_section_numeric.size_of_body();
		size += m_section_messages.size_of_body();
		size += m_section_monetary.size_of_body();

		return size;
	}

	template <typename Writer>
	bool encode_tail(Writer &wr) {
		(void)wr;
		bragi::serializer sr; (void)sr;
		uint64_t dyn_offs[6];

		dyn_offs[0] = 48;

		dyn_offs[1] = dyn_offs[0];
		dyn_offs[1] += m_section_ctype.size_of_body();

		dyn_offs[2] = dyn_offs[1];
		dyn_offs[2] += m_section_collate.size_of_body();

		dyn_offs[3] = dyn_offs[2];
		dyn_offs[3] += m_section_time.size_of_body();

		dyn_offs[4] = dyn_offs[3];
		dyn_offs[4] += m_section_numeric.size_of_body();

		dyn_offs[5] = dyn_offs[4];
		dyn_offs[5] += m_section_messages.size_of_body();

		if (!sr.write_integer<uint64_t>(wr, dyn_offs[0]))
			return false;

		if (!sr.write_integer<uint64_t>(wr, dyn_offs[1]))
			return false;

		if (!sr.write_integer<uint64_t>(wr, dyn_offs[2]))
			return false;

		if (!sr.write_integer<uint64_t>(wr, dyn_offs[3]))
			return false;

		if (!sr.write_integer<uint64_t>(wr, dyn_offs[4]))
			return false;

		if (!sr.write_integer<uint64_t>(wr, dyn_offs[5]))
			return false;

		if (!m_section_ctype.encode_body(wr, sr))
			return false;
		if (!m_section_collate.encode_body(wr, sr))
			return false;
		if (!m_section_time.encode_body(wr, sr))
			return false;
		if (!m_section_numeric.encode_body(wr, sr))
			return false;
		if (!m_section_messages.encode_body(wr, sr))
			return false;
		if (!m_section_monetary.encode_body(wr, sr))
			return false;
		return true;
	}

	template <typename Reader>
	bool decode_tail(Reader &rd) {
		(void)rd;
		bragi::deserializer de; (void)de;
		uint64_t ptr; (void)ptr;
		if (!de.read_integer<uint64_t>(rd, ptr))
			return false;
		de.push_index(ptr);
		if (!m_section_ctype.decode_body(rd, de))
			return false;
		p_section_ctype = true;
		de.pop_index();

		if (!de.read_integer<uint64_t>(rd, ptr))
			return false;
		de.push_index(ptr);
		if (!m_section_collate.decode_body(rd, de))
			return false;
		p_section_collate = true;
		de.pop_index();

		if (!de.read_integer<uint64_t>(rd, ptr))
			return false;
		de.push_index(ptr);
		if (!m_section_time.decode_body(rd, de))
			return false;
		p_section_time = true;
		de.pop_index();

		if (!de.read_integer<uint64_t>(rd, ptr))
			return false;
		de.push_index(ptr);
		if (!m_section_numeric.decode_body(rd, de))
			return false;
		p_section_numeric = true;
		de.pop_index();

		if (!de.read_integer<uint64_t>(rd, ptr))
			return false;
		de.push_index(ptr);
		if (!m_section_messages.decode_body(rd, de))
			return false;
		p_section_messages = true;
		de.pop_index();

		if (!de.read_integer<uint64_t>(rd, ptr))
			return false;
		de.push_index(ptr);
		if (!m_section_monetary.decode_body(rd, de))
			return false;
		p_section_monetary = true;
		de.pop_index();

		return true;
	}

private:
	lc_ctype m_section_ctype; bool p_section_ctype;
	lc_collate m_section_collate; bool p_section_collate;
	lc_time m_section_time; bool p_section_time;
	lc_numeric m_section_numeric; bool p_section_numeric;
	lc_messages m_section_messages; bool p_section_messages;
	lc_monetary m_section_monetary; bool p_section_monetary;
}; // struct Locale

