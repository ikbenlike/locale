%{
#include <string>
#include <cstdint>
#include "util.hpp"
#include "charmap.hpp"
%}

%require "3.2"
%language "c++"

%define parse.trace

%define api.token.constructor
%define api.prefix {charmap_parser}
%define api.value.type variant

%token <std::string> CONFIG
%token <std::string> CHARACTER_NAME
%token <uint8_t> CHARACTER_HEX
%token <uint8_t> CHARACTER_DEC
%token <uint8_t> CHARACTER_OCT
%token <uint8_t> NUMBER
%token EOL
%token <std::string> TEXT
%token CHARMAP
%token END
%token RANGE
%token RANGE_GNU
%token WIDTH
%token WIDTH_DEFAULT

%code {
    namespace charmap_parser {
        parser::symbol_type charmap_parserlex();
    }
}

%%

file : charmap_file YYEOF { YYACCEPT; } ;

charmap_file
 :
 | charmap
 | prelude charmap
 | charmap default_width
 | prelude charmap default_width
 | charmap default_width width_section
 | prelude charmap default_width width_section
 ;

prelude
 : configs
 ;

configs
 : CONFIG TEXT EOL { charmap::set_config($1, $2); }
 | CONFIG NUMBER EOL { charmap::set_config($1, $2); }
 | configs CONFIG TEXT EOL { charmap::set_config($2, $3); }
 | configs CONFIG NUMBER EOL { charmap::set_config($2, $3); }
 ;

charmap
 : CHARMAP definitions END CHARMAP EOL
 ;

definitions
 : definition EOL
 | definitions definition EOL
 ;

definition
 : CHARACTER_NAME value_list anything EOL
 | CHARACTER_NAME RANGE CHARACTER_NAME value_list anything EOL
 | CHARACTER_NAME RANGE_GNU CHARACTER_NAME value_list anything EOL
 ;

value_list
 : hex_list
 | dec_list
 | oct_list
 ;

hex_list
 : CHARACTER_HEX
 | hex_list CHARACTER_HEX
 ;

dec_list
 : CHARACTER_DEC
 | dec_list CHARACTER_DEC
 ;

oct_list
 : CHARACTER_OCT
 | oct_list CHARACTER_OCT
 ;

default_width
 : WIDTH_DEFAULT NUMBER EOL ;

width_section
 : WIDTH width_definitions END WIDTH EOL ;

width_definitions
 : width_definition
 | width_definitions width_definition
 ;

width_definition
 : CHARACTER_NAME NUMBER EOL
 | CHARACTER_NAME RANGE CHARACTER_NAME NUMBER EOL
 ;

anything
 : thing
 | anything thing
 ;

thing
 : CONFIG
 | CHARACTER_NAME
 | NUMBER
 | TEXT
 | CHARMAP
 | END
 | RANGE
 | RANGE_GNU
 | WIDTH
 | WIDTH_DEFAULT
 ;

%%

namespace charmap_parser {
    parser::symbol_type charmap_parserlex(){
        auto l = charmap::get_lexer();
        return l->get_token();
    }

    void parser::error(const std::string& m){
        std::cerr << m << std::endl;
    }
}
