%{
#include <string>
#include <cstdint>
#include "util.hpp"
#include "locale.hpp"
#include "locale.bragi.hpp"
%}

%require "3.2"
%language "c++"

%define parse.trace

%define api.token.constructor
%define api.prefix {locale_parser}
%define api.value.type variant

%token <std::string> CONFIG
%token <std::string> CHARACTER_NAME
%token <uint8_t> CHARACTER_LITERAL
%token EOL
%token <std::string> STRING
%token <uint8_t> NUMBER
%token SEMICOLON
%token BRACKET_OPEN
%token BRACKET_CLOSE
%token COMMA
%token <std::string> TEXT
%token T_LC_CTYPE
%token T_LC_COLLATE
%token T_LC_MESSAGES
%token T_LC_MONETARY
%token T_LC_NUMERIC
%token T_LC_TIME
%token T_LC_ADDRESS
%token T_LC_IDENTIFICATION
%token T_LC_MEASUREMENT
%token T_LC_NAME
%token T_LC_PAPER
%token T_LC_TELEPHONE
%token <std::string> FIELD_CTYPE_PAIRS
%token <std::string> FIELD_CTYPE_CHARS
%token <std::string> FIELD_COLLATE
%token <std::string> FIELD_MESSAGES
%token <std::string> FIELD_MONETARY_STRING
%token <std::string> FIELD_MONETARY_SINGLE_BYTE
%token <std::string> FIELD_MONETARY_BYTES
%token <std::string> FIELD_NUMERIC_STRING
%token <std::string> FIELD_NUMERIC_BYTES
%token <std::string> FIELD_TIME_STRING
%token <std::string> FIELD_TIME_MULTIPLE_STRINGS
%token <std::string> FIELD_ADDRESS
%token <std::string> FIELD_IDENTIFICATION
%token <std::string> FIELD_MEASUREMENT
%token <std::string> FIELD_NAME
%token <std::string> FIELD_PAPER
%token <std::string> FIELD_TELEPHONE
%token COPY
%token END
%token ESCAPE
%token ORDER_START
%token ORDER_END
%token FORWARD
%token BACKWARD
%token UNDEFINED
%token IGNORE
%token POSITION
%token ELLIPSIS
%token COLLATING_ELEMENT
%token COLLATING_SYMBOL
%token FROM

%type <pair> field_ctype_single_pair_value
%type <std::vector<pair>> field_ctype_pairs_value
%type <std::string> character_literals character_value
%type <std::vector<uint8_t>> field_bytes_value
%type <std::vector<std::string>> field_chars_value field_strings_value
%type <lc_ctype *> section_ctype definitions_ctype
%type <lc_collate *> section_collate
%type <lc_time *> section_time definitions_time
%type <lc_numeric *> section_numeric definitions_numeric
%type <lc_messages *> section_messages definitions_messages
%type <lc_monetary *> section_monetary definitions_monetary
%type <Locale *> sections

%code {
    namespace locale_parser {
        parser::symbol_type locale_parserlex();
    }
}

%%

file : locale_file YYEOF { YYACCEPT; } ;

locale_file
 :
 | prelude sections { locale::save_locale($2); }
 | sections { locale::save_locale($1); }
 ;

newlines
 : EOL
 | newlines EOL
 ;

prelude
 : configs ;

configs
 : CONFIG TEXT newlines { locale::set_config($1, $2); }
 | configs CONFIG TEXT newlines { locale::set_config($2, $3); }
 ;

sections
 : section_ctype
 {
    auto l = new Locale;
    if(!locale::set_section(l, &Locale::set_section_ctype, &Locale::section_ctype, $1)){
        YYERROR;
    }
    $$ = l;
 }
 | section_collate
 {
    auto l = new Locale;
    if(!locale::set_section(l, &Locale::set_section_collate, &Locale::section_collate, $1)){
        YYERROR;
    }
    $$ = l;
 }
 | section_monetary
 {
    auto l = new Locale;
    if(!locale::set_section(l, &Locale::set_section_monetary, &Locale::section_monetary, $1)){
        YYERROR;
    }
    $$ = l;
 }
 | section_numeric
 {
    auto l = new Locale;
    if(!locale::set_section(l, &Locale::set_section_numeric, &Locale::section_numeric, $1)){
        YYERROR;
    }
    $$ = l;
 }
 | section_time
 {
    auto l = new Locale;
    if(!locale::set_section(l, &Locale::set_section_time, &Locale::section_time, $1)){
        YYERROR;
    }
    $$ = l;
 }
 | section_messages
 {
    auto l = new Locale;
    if(!locale::set_section(l, &Locale::set_section_messages, &Locale::section_messages, $1)){
        YYERROR;
    }
    $$ = l;
 }
 | sections section_ctype
 {
    if(!locale::set_section($1, &Locale::set_section_ctype, &Locale::section_ctype, $2)){
        YYERROR;
    }
    $$ = $1;
 }
 | sections section_collate
 {
    if(!locale::set_section($1, &Locale::set_section_collate, &Locale::section_collate, $2)){
        YYERROR;
    }
    $$ = $1;
 }
 | sections section_monetary
 {
    if(!locale::set_section($1, &Locale::set_section_monetary, &Locale::section_monetary, $2)){
        YYERROR;
    }
    $$ = $1;
 }
 | sections section_numeric
 {
    if(!locale::set_section($1, &Locale::set_section_numeric, &Locale::section_numeric, $2)){
        YYERROR;
    }
    $$ = $1;
 }
 | sections section_time
 {
    if(!locale::set_section($1, &Locale::set_section_time, &Locale::section_time, $2)){
        YYERROR;
    }
    $$ = $1;
 }
 | sections section_messages
 {
    if(!locale::set_section($1, &Locale::set_section_messages, &Locale::section_messages, $2)){
        YYERROR;
    }
    $$ = $1;
 }
 ;

section_ctype
 : T_LC_CTYPE EOL COPY STRING EOL END T_LC_CTYPE newlines { $$ = new lc_ctype; }
 | T_LC_CTYPE EOL definitions_ctype END T_LC_CTYPE newlines { $$ = $3; }
 ;

definitions_ctype
 : FIELD_CTYPE_PAIRS field_ctype_pairs_value newlines
 {
    auto s = new lc_ctype;
    if(!locale::set_field(s, $1, $2)) YYERROR;
    $$ = s;
 }
 | FIELD_CTYPE_CHARS field_chars_value newlines
 {
    auto s = new lc_ctype;
    if(!locale::set_field(s, $1, $2)) YYERROR;
    $$ = s;
 }
 | definitions_ctype FIELD_CTYPE_PAIRS field_ctype_pairs_value newlines
 {
    if(!locale::set_field($1, $2, $3)) YYERROR;
    $$ = $1;
 }
 | definitions_ctype FIELD_CTYPE_CHARS field_chars_value newlines
 {
    if(!locale::set_field($1, $2, $3)) YYERROR;
    $$ = $1;
 }
 ;

field_ctype_pairs_value
 : field_ctype_single_pair_value { $$ = std::vector<pair>{$1}; }
 | field_ctype_pairs_value SEMICOLON field_ctype_single_pair_value { $1.push_back($3); $$ = $1; }
 | field_ctype_pairs_value SEMICOLON ESCAPE EOL field_ctype_single_pair_value { $1.push_back($5); $$ = $1; }
 ;

field_ctype_single_pair_value
 : BRACKET_OPEN character_value COMMA character_value BRACKET_CLOSE
 {
    auto p = pair{};
    p.set_left($2);
    p.set_right($4);
    $$ = p;
 };

section_collate
 : T_LC_COLLATE EOL COPY STRING EOL END T_LC_COLLATE newlines { $$ = new lc_collate; }
 | T_LC_COLLATE EOL collate_start definitions_collate ORDER_END EOL END T_LC_COLLATE newlines { $$ = new lc_collate; }
 | T_LC_COLLATE EOL definitions_pre_collate collate_start definitions_collate ORDER_END EOL END T_LC_COLLATE newlines
 ;

collate_start
 : ORDER_START EOL
 | ORDER_START order_operands EOL
 ;

order_operands
 : order_operand
 | order_operands SEMICOLON order_operand
 ;

order_operand
 : FORWARD
 | BACKWARD
 | POSITION
 ;

definitions_pre_collate
 : definition_pre_collate
 | definitions_pre_collate newlines definition_pre_collate
 ;

definition_pre_collate
 : COLLATING_SYMBOL CHARACTER_NAME
 | COLLATING_ELEMENT CHARACTER_NAME FROM STRING
 ;

definitions_collate
 : single_definition_collate
 | definitions_collate single_definition_collate
 ;

single_definition_collate
 : CHARACTER_NAME EOL
 | CHARACTER_NAME collate_char_specifiers EOL
 | UNDEFINED EOL
 ;

collate_char_specifiers
 : collate_char_specifier
 | collate_char_specifiers SEMICOLON collate_char_specifier
 ;

collate_char_specifier
 : CHARACTER_NAME
 | IGNORE
 | STRING
 ;

section_monetary
 : T_LC_MONETARY EOL COPY STRING EOL END T_LC_MONETARY newlines { $$ = new lc_monetary; }
 | T_LC_MONETARY EOL definitions_monetary END T_LC_MONETARY newlines { $$ = $3; }
 ;

definitions_monetary
 : FIELD_MONETARY_STRING STRING EOL
 {
    auto s = new lc_monetary;
    locale::set_field(s, $1, $2);
    $$ = s;
 }
 | FIELD_MONETARY_SINGLE_BYTE NUMBER EOL
 {
    auto s = new lc_monetary;
    locale::set_field(s, $1, $2);
    $$ = s;
 }
 | FIELD_MONETARY_BYTES field_bytes_value EOL
 {
    auto s = new lc_monetary;
    locale::set_field(s, $1, $2);
    $$ = s;
 }
 | definitions_monetary FIELD_MONETARY_STRING STRING EOL
 {
    if(!locale::set_field($1, $2, $3)){
        YYERROR;
    }
    $$ = $1;
 }
 | definitions_monetary FIELD_MONETARY_SINGLE_BYTE NUMBER EOL
 {
    if(!locale::set_field($1, $2, $3)){
        YYERROR;
    }
    $$ = $1;
 }
 | definitions_monetary FIELD_MONETARY_BYTES field_bytes_value EOL
 {
    if(!locale::set_field($1, $2, $3)){
        YYERROR;
    }
    $$ = $1;
 }
 ;

section_numeric
 : T_LC_NUMERIC EOL COPY STRING EOL END T_LC_NUMERIC newlines { $$ = new lc_numeric; }
 | T_LC_NUMERIC EOL definitions_numeric END T_LC_NUMERIC newlines { $$ = $3; }
 ;

definitions_numeric
 : FIELD_NUMERIC_STRING STRING EOL
 {
    auto s = new lc_numeric;
    locale::set_field(s, $1, $2);
    $$ = s;
 }
 | FIELD_NUMERIC_BYTES field_bytes_value EOL
 {
    auto s = new lc_numeric;
    locale::set_field(s, $1, $2);
    $$ = s;
 }
 | definitions_numeric FIELD_NUMERIC_STRING STRING EOL
 {
    if(!locale::set_field($1, $2, $3)){
        YYERROR;
    }
    $$ = $1;
 }
 | definitions_numeric FIELD_NUMERIC_BYTES field_bytes_value EOL
 {
    if(!locale::set_field($1, $2, $3)){
        YYERROR;
    }
    $$ = $1;
 }
 ;

section_time
 : T_LC_TIME EOL COPY STRING EOL END T_LC_TIME newlines { $$ = new lc_time; }
 | T_LC_TIME EOL definitions_time END T_LC_TIME newlines { $$ = $3; }
 ;

definitions_time
 : FIELD_TIME_STRING STRING EOL
 {
    auto s = new lc_time;
    locale::set_field(s, $1, $2);
    $$ = s;
 }
 | FIELD_TIME_MULTIPLE_STRINGS field_strings_value EOL
 {
    auto s = new lc_time;
    locale::set_field(s, $1, $2);
    $$ = s;
 }
 | definitions_time FIELD_TIME_STRING STRING EOL
 {
    if(!locale::set_field($1, $2, $3)){
        YYERROR;
    }
    $$ = $1;
 }
 | definitions_time FIELD_TIME_MULTIPLE_STRINGS field_strings_value EOL
 {
    if(!locale::set_field($1, $2, $3)){
        YYERROR;
    }
    $$ = $1;
 }
 ;

section_messages
 : T_LC_MESSAGES EOL COPY STRING EOL END T_LC_MESSAGES newlines { $$ = new lc_messages; }
 | T_LC_MESSAGES EOL definitions_messages END T_LC_MESSAGES newlines { $$ = $3; }
 ;

definitions_messages
 : FIELD_MESSAGES STRING EOL
 {
    auto s = new lc_messages;
    locale::set_field(s, $1, $2);
    $$ = s;
 }
 | definitions_messages FIELD_MESSAGES STRING EOL
 {
    if(!locale::set_field($1, $2, $3)){
        YYERROR;
    }
    $$ = $1;
 }
 ;

character_value
 : CHARACTER_NAME
 {
    auto o_char = locale::lookup_character($1);
    if(!o_char.has_value()){
        YYERROR;
    }
    $$ = *o_char;
 }
 | character_literals
 ;

field_chars_value
 : character_value { $$ = std::vector<std::string>{$1}; }
 | field_chars_value SEMICOLON character_value { $1.push_back($3); $$ = $1; }
 | field_chars_value SEMICOLON ESCAPE EOL character_value { $1.push_back($5); $$ = $1; }
 ;

field_bytes_value
 : NUMBER { $$ = std::vector<uint8_t>{$1}; }
 | field_bytes_value SEMICOLON NUMBER { $1.push_back($3); $$ = $1; }
 | field_bytes_value SEMICOLON ESCAPE EOL NUMBER { $1.push_back($5); $$ = $1; }
 ;

field_strings_value
 : STRING { $$ = std::vector<std::string>{$1}; }
 | field_strings_value SEMICOLON STRING { $1.push_back($3); $$ = $1; }
 | field_strings_value SEMICOLON ESCAPE EOL STRING { $1.push_back($5); $$ = $1; }
 ;

character_literals
 : CHARACTER_LITERAL { $$ = std::string{(char)$1}; }
 | character_literals CHARACTER_LITERAL { $1.push_back((char)$2); $$ = $1; }
 ;

%%

namespace locale_parser {
    parser::symbol_type locale_parserlex(){
        auto l = locale::get_lexer();
        return l->get_token();
    }

    void parser::error(const std::string& m){
        std::cerr << m << std::endl;
    }
}
